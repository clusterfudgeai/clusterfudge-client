# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from ..fudgelet import fudgelet_pb2 as fudgelet_dot_fudgelet__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in fudgelet/fudgelet_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class FudgeletStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamLiveness = channel.stream_unary(
                '/clusterfudge.Fudgelet/StreamLiveness',
                request_serializer=fudgelet_dot_fudgelet__pb2.LivenessRequest.SerializeToString,
                response_deserializer=fudgelet_dot_fudgelet__pb2.LivenessResponse.FromString,
                _registered_method=True)
        self.IngestNode = channel.unary_unary(
                '/clusterfudge.Fudgelet/IngestNode',
                request_serializer=fudgelet_dot_fudgelet__pb2.IngestNodeRequest.SerializeToString,
                response_deserializer=fudgelet_dot_fudgelet__pb2.IngestNodeResponse.FromString,
                _registered_method=True)
        self.IngestAgentStats = channel.unary_unary(
                '/clusterfudge.Fudgelet/IngestAgentStats',
                request_serializer=fudgelet_dot_fudgelet__pb2.IngestAgentStatsRequest.SerializeToString,
                response_deserializer=fudgelet_dot_fudgelet__pb2.IngestAgentStatsResponse.FromString,
                _registered_method=True)
        self.IngestLog = channel.unary_unary(
                '/clusterfudge.Fudgelet/IngestLog',
                request_serializer=fudgelet_dot_fudgelet__pb2.IngestLogRequest.SerializeToString,
                response_deserializer=fudgelet_dot_fudgelet__pb2.IngestLogResponse.FromString,
                _registered_method=True)
        self.IngestProcessMetricsAlphaV1 = channel.unary_unary(
                '/clusterfudge.Fudgelet/IngestProcessMetricsAlphaV1',
                request_serializer=fudgelet_dot_fudgelet__pb2.IngestProcessMetricsAlphaV1Request.SerializeToString,
                response_deserializer=fudgelet_dot_fudgelet__pb2.IngestProcessMetricsAlphaV1Response.FromString,
                _registered_method=True)
        self.StreamHTTP = channel.stream_stream(
                '/clusterfudge.Fudgelet/StreamHTTP',
                request_serializer=fudgelet_dot_fudgelet__pb2.ProxyInitialiseRequestOrResponse.SerializeToString,
                response_deserializer=fudgelet_dot_fudgelet__pb2.ProxiedRequest.FromString,
                _registered_method=True)
        self.StreamLogs = channel.stream_unary(
                '/clusterfudge.Fudgelet/StreamLogs',
                request_serializer=fudgelet_dot_fudgelet__pb2.Log.SerializeToString,
                response_deserializer=fudgelet_dot_fudgelet__pb2.StreamLogsResponse.FromString,
                _registered_method=True)
        self.StreamTCP = channel.stream_stream(
                '/clusterfudge.Fudgelet/StreamTCP',
                request_serializer=fudgelet_dot_fudgelet__pb2.TCPPacket.SerializeToString,
                response_deserializer=fudgelet_dot_fudgelet__pb2.TCPPacket.FromString,
                _registered_method=True)
        self.StreamTCPControl = channel.unary_stream(
                '/clusterfudge.Fudgelet/StreamTCPControl',
                request_serializer=fudgelet_dot_fudgelet__pb2.ClientReady.SerializeToString,
                response_deserializer=fudgelet_dot_fudgelet__pb2.NewConnection.FromString,
                _registered_method=True)
        self.IngestSlurmJobs = channel.unary_unary(
                '/clusterfudge.Fudgelet/IngestSlurmJobs',
                request_serializer=fudgelet_dot_fudgelet__pb2.IngestSlurmJobsRequest.SerializeToString,
                response_deserializer=fudgelet_dot_fudgelet__pb2.IngestSlurmJobsResponse.FromString,
                _registered_method=True)
        self.IngestSlurmNodes = channel.unary_unary(
                '/clusterfudge.Fudgelet/IngestSlurmNodes',
                request_serializer=fudgelet_dot_fudgelet__pb2.IngestSlurmNodesRequest.SerializeToString,
                response_deserializer=fudgelet_dot_fudgelet__pb2.IngestSlurmNodesResponse.FromString,
                _registered_method=True)


class FudgeletServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamLiveness(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IngestNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IngestAgentStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IngestLog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IngestProcessMetricsAlphaV1(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamHTTP(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamLogs(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamTCP(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamTCPControl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IngestSlurmJobs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IngestSlurmNodes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FudgeletServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamLiveness': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamLiveness,
                    request_deserializer=fudgelet_dot_fudgelet__pb2.LivenessRequest.FromString,
                    response_serializer=fudgelet_dot_fudgelet__pb2.LivenessResponse.SerializeToString,
            ),
            'IngestNode': grpc.unary_unary_rpc_method_handler(
                    servicer.IngestNode,
                    request_deserializer=fudgelet_dot_fudgelet__pb2.IngestNodeRequest.FromString,
                    response_serializer=fudgelet_dot_fudgelet__pb2.IngestNodeResponse.SerializeToString,
            ),
            'IngestAgentStats': grpc.unary_unary_rpc_method_handler(
                    servicer.IngestAgentStats,
                    request_deserializer=fudgelet_dot_fudgelet__pb2.IngestAgentStatsRequest.FromString,
                    response_serializer=fudgelet_dot_fudgelet__pb2.IngestAgentStatsResponse.SerializeToString,
            ),
            'IngestLog': grpc.unary_unary_rpc_method_handler(
                    servicer.IngestLog,
                    request_deserializer=fudgelet_dot_fudgelet__pb2.IngestLogRequest.FromString,
                    response_serializer=fudgelet_dot_fudgelet__pb2.IngestLogResponse.SerializeToString,
            ),
            'IngestProcessMetricsAlphaV1': grpc.unary_unary_rpc_method_handler(
                    servicer.IngestProcessMetricsAlphaV1,
                    request_deserializer=fudgelet_dot_fudgelet__pb2.IngestProcessMetricsAlphaV1Request.FromString,
                    response_serializer=fudgelet_dot_fudgelet__pb2.IngestProcessMetricsAlphaV1Response.SerializeToString,
            ),
            'StreamHTTP': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamHTTP,
                    request_deserializer=fudgelet_dot_fudgelet__pb2.ProxyInitialiseRequestOrResponse.FromString,
                    response_serializer=fudgelet_dot_fudgelet__pb2.ProxiedRequest.SerializeToString,
            ),
            'StreamLogs': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamLogs,
                    request_deserializer=fudgelet_dot_fudgelet__pb2.Log.FromString,
                    response_serializer=fudgelet_dot_fudgelet__pb2.StreamLogsResponse.SerializeToString,
            ),
            'StreamTCP': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamTCP,
                    request_deserializer=fudgelet_dot_fudgelet__pb2.TCPPacket.FromString,
                    response_serializer=fudgelet_dot_fudgelet__pb2.TCPPacket.SerializeToString,
            ),
            'StreamTCPControl': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamTCPControl,
                    request_deserializer=fudgelet_dot_fudgelet__pb2.ClientReady.FromString,
                    response_serializer=fudgelet_dot_fudgelet__pb2.NewConnection.SerializeToString,
            ),
            'IngestSlurmJobs': grpc.unary_unary_rpc_method_handler(
                    servicer.IngestSlurmJobs,
                    request_deserializer=fudgelet_dot_fudgelet__pb2.IngestSlurmJobsRequest.FromString,
                    response_serializer=fudgelet_dot_fudgelet__pb2.IngestSlurmJobsResponse.SerializeToString,
            ),
            'IngestSlurmNodes': grpc.unary_unary_rpc_method_handler(
                    servicer.IngestSlurmNodes,
                    request_deserializer=fudgelet_dot_fudgelet__pb2.IngestSlurmNodesRequest.FromString,
                    response_serializer=fudgelet_dot_fudgelet__pb2.IngestSlurmNodesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'clusterfudge.Fudgelet', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('clusterfudge.Fudgelet', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Fudgelet(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamLiveness(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/clusterfudge.Fudgelet/StreamLiveness',
            fudgelet_dot_fudgelet__pb2.LivenessRequest.SerializeToString,
            fudgelet_dot_fudgelet__pb2.LivenessResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IngestNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/clusterfudge.Fudgelet/IngestNode',
            fudgelet_dot_fudgelet__pb2.IngestNodeRequest.SerializeToString,
            fudgelet_dot_fudgelet__pb2.IngestNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IngestAgentStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/clusterfudge.Fudgelet/IngestAgentStats',
            fudgelet_dot_fudgelet__pb2.IngestAgentStatsRequest.SerializeToString,
            fudgelet_dot_fudgelet__pb2.IngestAgentStatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IngestLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/clusterfudge.Fudgelet/IngestLog',
            fudgelet_dot_fudgelet__pb2.IngestLogRequest.SerializeToString,
            fudgelet_dot_fudgelet__pb2.IngestLogResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IngestProcessMetricsAlphaV1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/clusterfudge.Fudgelet/IngestProcessMetricsAlphaV1',
            fudgelet_dot_fudgelet__pb2.IngestProcessMetricsAlphaV1Request.SerializeToString,
            fudgelet_dot_fudgelet__pb2.IngestProcessMetricsAlphaV1Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamHTTP(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/clusterfudge.Fudgelet/StreamHTTP',
            fudgelet_dot_fudgelet__pb2.ProxyInitialiseRequestOrResponse.SerializeToString,
            fudgelet_dot_fudgelet__pb2.ProxiedRequest.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamLogs(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/clusterfudge.Fudgelet/StreamLogs',
            fudgelet_dot_fudgelet__pb2.Log.SerializeToString,
            fudgelet_dot_fudgelet__pb2.StreamLogsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamTCP(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/clusterfudge.Fudgelet/StreamTCP',
            fudgelet_dot_fudgelet__pb2.TCPPacket.SerializeToString,
            fudgelet_dot_fudgelet__pb2.TCPPacket.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamTCPControl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/clusterfudge.Fudgelet/StreamTCPControl',
            fudgelet_dot_fudgelet__pb2.ClientReady.SerializeToString,
            fudgelet_dot_fudgelet__pb2.NewConnection.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IngestSlurmJobs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/clusterfudge.Fudgelet/IngestSlurmJobs',
            fudgelet_dot_fudgelet__pb2.IngestSlurmJobsRequest.SerializeToString,
            fudgelet_dot_fudgelet__pb2.IngestSlurmJobsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IngestSlurmNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/clusterfudge.Fudgelet/IngestSlurmNodes',
            fudgelet_dot_fudgelet__pb2.IngestSlurmNodesRequest.SerializeToString,
            fudgelet_dot_fudgelet__pb2.IngestSlurmNodesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
