# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from ..launches import launches_pb2 as launches_dot_launches__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in launches/launches_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class LaunchesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetLaunch = channel.unary_unary(
                '/clusterfudge.Launches/GetLaunch',
                request_serializer=launches_dot_launches__pb2.GetLaunchRequest.SerializeToString,
                response_deserializer=launches_dot_launches__pb2.Launch.FromString,
                _registered_method=True)
        self.GetLaunchDetails = channel.unary_unary(
                '/clusterfudge.Launches/GetLaunchDetails',
                request_serializer=launches_dot_launches__pb2.GetLaunchDetailsRequest.SerializeToString,
                response_deserializer=launches_dot_launches__pb2.LaunchDetails.FromString,
                _registered_method=True)
        self.ListLaunches = channel.unary_unary(
                '/clusterfudge.Launches/ListLaunches',
                request_serializer=launches_dot_launches__pb2.ListLaunchesRequest.SerializeToString,
                response_deserializer=launches_dot_launches__pb2.ListLaunchesResponse.FromString,
                _registered_method=True)
        self.CreateLaunch = channel.unary_unary(
                '/clusterfudge.Launches/CreateLaunch',
                request_serializer=launches_dot_launches__pb2.CreateLaunchRequest.SerializeToString,
                response_deserializer=launches_dot_launches__pb2.Launch.FromString,
                _registered_method=True)
        self.StopLaunch = channel.unary_unary(
                '/clusterfudge.Launches/StopLaunch',
                request_serializer=launches_dot_launches__pb2.StopLaunchRequest.SerializeToString,
                response_deserializer=launches_dot_launches__pb2.StopLaunchResponse.FromString,
                _registered_method=True)
        self.RerunLaunch = channel.unary_unary(
                '/clusterfudge.Launches/RerunLaunch',
                request_serializer=launches_dot_launches__pb2.RerunLaunchRequest.SerializeToString,
                response_deserializer=launches_dot_launches__pb2.RerunLaunchResponse.FromString,
                _registered_method=True)
        self.LaunchHelloWorld = channel.unary_unary(
                '/clusterfudge.Launches/LaunchHelloWorld',
                request_serializer=launches_dot_launches__pb2.LaunchHelloWorldRequest.SerializeToString,
                response_deserializer=launches_dot_launches__pb2.LaunchHelloWorldResponse.FromString,
                _registered_method=True)
        self.LaunchGpuBurn = channel.unary_unary(
                '/clusterfudge.Launches/LaunchGpuBurn',
                request_serializer=launches_dot_launches__pb2.LaunchGpuBurnRequest.SerializeToString,
                response_deserializer=launches_dot_launches__pb2.LaunchGpuBurnResponse.FromString,
                _registered_method=True)
        self.LaunchJupyterNotebook = channel.unary_unary(
                '/clusterfudge.Launches/LaunchJupyterNotebook',
                request_serializer=launches_dot_launches__pb2.LaunchJupyterNotebookRequest.SerializeToString,
                response_deserializer=launches_dot_launches__pb2.LaunchJupyterNotebookResponse.FromString,
                _registered_method=True)
        self.LaunchWorkstation = channel.unary_unary(
                '/clusterfudge.Launches/LaunchWorkstation',
                request_serializer=launches_dot_launches__pb2.LaunchWorkstationRequest.SerializeToString,
                response_deserializer=launches_dot_launches__pb2.LaunchWorkstationResponse.FromString,
                _registered_method=True)
        self.ListResources = channel.unary_unary(
                '/clusterfudge.Launches/ListResources',
                request_serializer=launches_dot_launches__pb2.ListResourcesRequest.SerializeToString,
                response_deserializer=launches_dot_launches__pb2.ListResourcesResponse.FromString,
                _registered_method=True)
        self.DownloadZip = channel.unary_unary(
                '/clusterfudge.Launches/DownloadZip',
                request_serializer=launches_dot_launches__pb2.DownloadZipRequest.SerializeToString,
                response_deserializer=launches_dot_launches__pb2.DownloadZipResponse.FromString,
                _registered_method=True)


class LaunchesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetLaunch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLaunchDetails(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListLaunches(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateLaunch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopLaunch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RerunLaunch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LaunchHelloWorld(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LaunchGpuBurn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LaunchJupyterNotebook(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LaunchWorkstation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListResources(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadZip(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LaunchesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetLaunch': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLaunch,
                    request_deserializer=launches_dot_launches__pb2.GetLaunchRequest.FromString,
                    response_serializer=launches_dot_launches__pb2.Launch.SerializeToString,
            ),
            'GetLaunchDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLaunchDetails,
                    request_deserializer=launches_dot_launches__pb2.GetLaunchDetailsRequest.FromString,
                    response_serializer=launches_dot_launches__pb2.LaunchDetails.SerializeToString,
            ),
            'ListLaunches': grpc.unary_unary_rpc_method_handler(
                    servicer.ListLaunches,
                    request_deserializer=launches_dot_launches__pb2.ListLaunchesRequest.FromString,
                    response_serializer=launches_dot_launches__pb2.ListLaunchesResponse.SerializeToString,
            ),
            'CreateLaunch': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateLaunch,
                    request_deserializer=launches_dot_launches__pb2.CreateLaunchRequest.FromString,
                    response_serializer=launches_dot_launches__pb2.Launch.SerializeToString,
            ),
            'StopLaunch': grpc.unary_unary_rpc_method_handler(
                    servicer.StopLaunch,
                    request_deserializer=launches_dot_launches__pb2.StopLaunchRequest.FromString,
                    response_serializer=launches_dot_launches__pb2.StopLaunchResponse.SerializeToString,
            ),
            'RerunLaunch': grpc.unary_unary_rpc_method_handler(
                    servicer.RerunLaunch,
                    request_deserializer=launches_dot_launches__pb2.RerunLaunchRequest.FromString,
                    response_serializer=launches_dot_launches__pb2.RerunLaunchResponse.SerializeToString,
            ),
            'LaunchHelloWorld': grpc.unary_unary_rpc_method_handler(
                    servicer.LaunchHelloWorld,
                    request_deserializer=launches_dot_launches__pb2.LaunchHelloWorldRequest.FromString,
                    response_serializer=launches_dot_launches__pb2.LaunchHelloWorldResponse.SerializeToString,
            ),
            'LaunchGpuBurn': grpc.unary_unary_rpc_method_handler(
                    servicer.LaunchGpuBurn,
                    request_deserializer=launches_dot_launches__pb2.LaunchGpuBurnRequest.FromString,
                    response_serializer=launches_dot_launches__pb2.LaunchGpuBurnResponse.SerializeToString,
            ),
            'LaunchJupyterNotebook': grpc.unary_unary_rpc_method_handler(
                    servicer.LaunchJupyterNotebook,
                    request_deserializer=launches_dot_launches__pb2.LaunchJupyterNotebookRequest.FromString,
                    response_serializer=launches_dot_launches__pb2.LaunchJupyterNotebookResponse.SerializeToString,
            ),
            'LaunchWorkstation': grpc.unary_unary_rpc_method_handler(
                    servicer.LaunchWorkstation,
                    request_deserializer=launches_dot_launches__pb2.LaunchWorkstationRequest.FromString,
                    response_serializer=launches_dot_launches__pb2.LaunchWorkstationResponse.SerializeToString,
            ),
            'ListResources': grpc.unary_unary_rpc_method_handler(
                    servicer.ListResources,
                    request_deserializer=launches_dot_launches__pb2.ListResourcesRequest.FromString,
                    response_serializer=launches_dot_launches__pb2.ListResourcesResponse.SerializeToString,
            ),
            'DownloadZip': grpc.unary_unary_rpc_method_handler(
                    servicer.DownloadZip,
                    request_deserializer=launches_dot_launches__pb2.DownloadZipRequest.FromString,
                    response_serializer=launches_dot_launches__pb2.DownloadZipResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'clusterfudge.Launches', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('clusterfudge.Launches', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Launches(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetLaunch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/clusterfudge.Launches/GetLaunch',
            launches_dot_launches__pb2.GetLaunchRequest.SerializeToString,
            launches_dot_launches__pb2.Launch.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLaunchDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/clusterfudge.Launches/GetLaunchDetails',
            launches_dot_launches__pb2.GetLaunchDetailsRequest.SerializeToString,
            launches_dot_launches__pb2.LaunchDetails.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListLaunches(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/clusterfudge.Launches/ListLaunches',
            launches_dot_launches__pb2.ListLaunchesRequest.SerializeToString,
            launches_dot_launches__pb2.ListLaunchesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateLaunch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/clusterfudge.Launches/CreateLaunch',
            launches_dot_launches__pb2.CreateLaunchRequest.SerializeToString,
            launches_dot_launches__pb2.Launch.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopLaunch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/clusterfudge.Launches/StopLaunch',
            launches_dot_launches__pb2.StopLaunchRequest.SerializeToString,
            launches_dot_launches__pb2.StopLaunchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RerunLaunch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/clusterfudge.Launches/RerunLaunch',
            launches_dot_launches__pb2.RerunLaunchRequest.SerializeToString,
            launches_dot_launches__pb2.RerunLaunchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LaunchHelloWorld(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/clusterfudge.Launches/LaunchHelloWorld',
            launches_dot_launches__pb2.LaunchHelloWorldRequest.SerializeToString,
            launches_dot_launches__pb2.LaunchHelloWorldResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LaunchGpuBurn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/clusterfudge.Launches/LaunchGpuBurn',
            launches_dot_launches__pb2.LaunchGpuBurnRequest.SerializeToString,
            launches_dot_launches__pb2.LaunchGpuBurnResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LaunchJupyterNotebook(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/clusterfudge.Launches/LaunchJupyterNotebook',
            launches_dot_launches__pb2.LaunchJupyterNotebookRequest.SerializeToString,
            launches_dot_launches__pb2.LaunchJupyterNotebookResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LaunchWorkstation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/clusterfudge.Launches/LaunchWorkstation',
            launches_dot_launches__pb2.LaunchWorkstationRequest.SerializeToString,
            launches_dot_launches__pb2.LaunchWorkstationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListResources(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/clusterfudge.Launches/ListResources',
            launches_dot_launches__pb2.ListResourcesRequest.SerializeToString,
            launches_dot_launches__pb2.ListResourcesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DownloadZip(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/clusterfudge.Launches/DownloadZip',
            launches_dot_launches__pb2.DownloadZipRequest.SerializeToString,
            launches_dot_launches__pb2.DownloadZipResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
