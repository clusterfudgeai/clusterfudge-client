
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import launches_pb2 as launches_dot_launches__pb2


class LaunchesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetLaunch = channel.unary_unary(
                '/clusterfudge.Launches/GetLaunch',
                request_serializer=launches_dot_launches__pb2.GetLaunchRequest.SerializeToString,
                response_deserializer=launches_dot_launches__pb2.Launch.FromString,
                )
        self.ListLaunches = channel.unary_unary(
                '/clusterfudge.Launches/ListLaunches',
                request_serializer=launches_dot_launches__pb2.ListLaunchesRequest.SerializeToString,
                response_deserializer=launches_dot_launches__pb2.ListLaunchesResponse.FromString,
                )
        self.ListLaunchesWithCommandStatuses = channel.unary_unary(
                '/clusterfudge.Launches/ListLaunchesWithCommandStatuses',
                request_serializer=launches_dot_launches__pb2.ListLaunchesRequest.SerializeToString,
                response_deserializer=launches_dot_launches__pb2.ListLaunchesWithCommandStatusesResponse.FromString,
                )
        self.CreateLaunch = channel.unary_unary(
                '/clusterfudge.Launches/CreateLaunch',
                request_serializer=launches_dot_launches__pb2.CreateLaunchRequest.SerializeToString,
                response_deserializer=launches_dot_launches__pb2.Launch.FromString,
                )


class LaunchesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetLaunch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListLaunches(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListLaunchesWithCommandStatuses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateLaunch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LaunchesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetLaunch': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLaunch,
                    request_deserializer=launches_dot_launches__pb2.GetLaunchRequest.FromString,
                    response_serializer=launches_dot_launches__pb2.Launch.SerializeToString,
            ),
            'ListLaunches': grpc.unary_unary_rpc_method_handler(
                    servicer.ListLaunches,
                    request_deserializer=launches_dot_launches__pb2.ListLaunchesRequest.FromString,
                    response_serializer=launches_dot_launches__pb2.ListLaunchesResponse.SerializeToString,
            ),
            'ListLaunchesWithCommandStatuses': grpc.unary_unary_rpc_method_handler(
                    servicer.ListLaunchesWithCommandStatuses,
                    request_deserializer=launches_dot_launches__pb2.ListLaunchesRequest.FromString,
                    response_serializer=launches_dot_launches__pb2.ListLaunchesWithCommandStatusesResponse.SerializeToString,
            ),
            'CreateLaunch': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateLaunch,
                    request_deserializer=launches_dot_launches__pb2.CreateLaunchRequest.FromString,
                    response_serializer=launches_dot_launches__pb2.Launch.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'clusterfudge.Launches', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Launches(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetLaunch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/clusterfudge.Launches/GetLaunch',
            launches_dot_launches__pb2.GetLaunchRequest.SerializeToString,
            launches_dot_launches__pb2.Launch.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListLaunches(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/clusterfudge.Launches/ListLaunches',
            launches_dot_launches__pb2.ListLaunchesRequest.SerializeToString,
            launches_dot_launches__pb2.ListLaunchesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListLaunchesWithCommandStatuses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/clusterfudge.Launches/ListLaunchesWithCommandStatuses',
            launches_dot_launches__pb2.ListLaunchesRequest.SerializeToString,
            launches_dot_launches__pb2.ListLaunchesWithCommandStatusesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateLaunch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/clusterfudge.Launches/CreateLaunch',
            launches_dot_launches__pb2.CreateLaunchRequest.SerializeToString,
            launches_dot_launches__pb2.Launch.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)